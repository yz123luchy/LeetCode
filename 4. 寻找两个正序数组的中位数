double findMedianSortedArrays(int* nums1, int m, int* nums2, int n) {
    // 确保第一个数组较短
    if (m > n) {
        return findMedianSortedArrays(nums2, n, nums1, m);
    }

    int left = 0, right = m;
    int total = (m + n + 1) / 2;  // 左半部分的总长度

    while (left <= right) {
        int i = (left + right) / 2;   // nums1 中的划分位置
        int j = total - i;            // nums2 中的划分位置

        // 检查划分是否合理
        if (i < m && nums2[j - 1] > nums1[i]) {
            // i 需要右移
            left = i + 1;
        } else if (i > 0 && nums1[i - 1] > nums2[j]) {
            // i 需要左移
            right = i - 1;
        } else {
            // 找到合适的划分
            int maxLeft;
            if (i == 0) {
                maxLeft = nums2[j - 1];
            } else if (j == 0) {
                maxLeft = nums1[i - 1];
            } else {
                maxLeft = nums1[i - 1] > nums2[j - 1] ? nums1[i - 1] : nums2[j - 1];
            }

            if ((m + n) % 2 == 1) {
                return maxLeft;  // 如果总长度为奇数，直接返回左半部分的最大值
            }

            int minRight;
            if (i == m) {
                minRight = nums2[j];
            } else if (j == n) {
                minRight = nums1[i];
            } else {
                minRight = nums1[i] < nums2[j] ? nums1[i] : nums2[j];
            }

            return (maxLeft + minRight) / 2.0;  // 如果总长度为偶数，返回中位数
        }
    }

    return 0.0;
}
